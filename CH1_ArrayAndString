# CHAPTER 1: ARRAY/STRING

#1. Two Sum

# Two pointers
# Time: O(nlogn), Space: O(n)
# Create extra copy of nums 
# find the location in the copied array
# find the original location
def twoSum2(nums, target):
            
    n1 = -1; n2 = -1
    i1 = -1; i2 = -1
    num2 = sorted(nums)
    l = 0
    r = len(nums) - 1 

    # find target sum in the copied array
    while l <= r: 
    	if num2[l] + num2[r] == target: 
    		n1, n2 = num2[l], num2[r]
    		break 
    	elif num2[l] + num2[r] < target: 
    		l += 1 
    	else: 
    		r -= 1

    # find the original location
    for i in range(len(nums)): 
    	if nums[i] == n1: 
    		i1 = i 
    		break 

    # find the original location of n2
    # use reversed range to avoid duplicate 
    for j in reversed(range(len(nums))): 
    	if nums[j] == n2: 
    		i2 = j 
    		break 

    # i1 might > i2, use min and max to avoid wrong order
    return [min(i1,i2)+1, max(i1,i2)+1]

# naive way 
# O(n) time; O(n) space
# record the index of each num 
# if target - x in dict, it means x + (target - x) = target 
def twoSum(nums, target):
	dict = {}
	for i in range(len(nums)): 
		print dict
   		x = nums[i]
    	if target - x in dict: 
        	return [min(i, dict[target - x])+1, max(i, dict[target - x]) + 1]
        dict[x] = i

#print twoSum([4,2,3], 6)

# 2. Two Sum II - Input array is sorted 

# Question:
# Similar to Question [1. Two Sum], except that the input array is already sorted in ascending order

# O(n log n) runtime, O(1) space - Binary search:
# use binary search target - numbers[i] instead of record the location in dict

# def twoSumII(nums, target): 
# 	pass

# O(n) time; O(1) space 
# Two pointers

def twoSumII(nums, target):
	l = 0
	r = len(nums) - 1 
	while l <= r: 
		if nums[l] + nums[r] == target: 
			return [l+1, r+1]
		elif nums[l] + nums[r] < target: 
			l += 1 
		else: r -= 1

# Time limit exceed
def addDigits(num):
	res = 0 
	while True: 
		if len(str(res)) == 1 and res != 0:
			return res
		nres = 0
		for digit in str(num): 
			nres += int(digit)
		num = res
		res = nres 
#print addDigits(38)



# 3. Two Sum III - Data structure design

# array cannot avoid duplicates
# so we need a dict to count the number of appearing times

# add O(n) time, find O(n) time, Space O(n)
class twoSum:

    def __init__(self): 
        self.dict = {}

    def add(self, x): 
        if x in self.dict: 
            self.dict[x] += 1 
        else: 
            self.dict[x] = 1
        

    def find(self, target): 
        for num in self.dict.keys():
            if target - num != num and target - num in self.dict: 
                return True 
            # avoid duplicate: count of dup num must >= 2
            elif target - num == num and self.dict[num] >= 2: 
                return True 
        return False

if __name__ == "__main__":
    sum1 = twoSum()
    sum1.add(3)
    sum1.add(5)
    sum1.find(8)
    sum1.find(6)


# 4. Valid Palindrome

# Q: What about an empty string? Is it a valid palindrome?
# A: For the purpose of this problem, we define empty string as valid palindrome.

# #O(1) runtime, O(n) space
def isPalindrome(s): 
    return ''.join(s.split()) == ''.join(s.split())[::-1]



#O(n) runtime, O(1) space
# two pointers

# s.isalnum
# be careful l < r while moving pointers
def isPalindrome(s): 
    l = 0 
    r = len(s) - 1
    while l < r: 
        while l<r and not s[l].isalnum():
            l += 1 
        while l<r and not s[r] .isalnum():
            r -= 1
        if s[l].lower() != s[r].lower(): 
            return False 
        l += 1 
        r -= 1
    return True
#print isPalindrome('A man, a plan, a canal: Panama')


# 5. Implement strstr()

# O(nm) runtime, O(1) space - Brute force

def strStr(haystack, needle):
    m = len(haystack)
    n = len(needle)
    for i in range(m - n + 1):
        if haystack[i: i+ n] == needle: 
            return i
    return -1
 
#print strStr('abs','ab')     


# 6. Reverse Words in a String

# string to list: list(s)

def reverseWords(s): 
    return ' '.join(reversed(s.split()))

# O(n) runtime, O(n) space
def reverseWords(s): 
    pass

# 7. Reverse Words in a String II

# The input string does not contain leading or trailing spaces and the words are always separated by a single space.
# Could you do it in place without allocating extra space?

# Python, string cannot be assigned 

# input is a list of string

# O(n) runtime, O(1) space In place reverse

# (s')' = s
# reverse the entire str first, and then reverse each word
def reverseWords(s): 
    if len(s) <= 1: 
        return s 
    reverse(s, 0, len(s) - 1)
    # i is the start position; j is the end postion
    i = 0 
    for j in range(len(s)):
        if j+1 < len(s) and s[j+1] == ' ' or j == len(s)-1:
            reverse(s, i, j)
            i = j+2
        
    return s

def reverse(s,l,r): 
    while l < r: 
        s[l], s[r] = s[r], s[l]
        l += 1; r -=1
    return s 

#print reverseWords(['s','k','y',' ','i','s'])


# 8. String to Integer (atoi)
# Implement atoi to convert a string to an integer.

# strip: delete white space in the beginning and the end 

# use strip, not split() to void white space in the middle
# Ex. "   +0 123"
# Ex. "+-2", return 0 


# steps: 
# null case
# strip the sides' white space; 
# record the sign 
# *10 and add num if isdigit, else break 
# mul the sign 
# return res without overflow
def atoi(s): 
    if s == '': return 0

    s = s.strip()
    start = 0
    sign = 1
    res = 0 

    if s[0] == '+': 
        start = 1
    if s[0] =='-': 
        sign = -1
        start = 1 

    for i in range(start, len(s)): 
        if s[i].isdigit():
            res *= 10 
            res += int(s[i])
        else: 
            break

    res *= sign

    if res > 2**31 -1: 
        return 2**31 -1 
    elif res < - 2**31: 
        return - 2**31
    else: 
        return res

#print atoi('    +-2')

 

# 9. Valid Number

# 
def isNumber(s): 
    s = s.strip() 
    i = 0
    res = False 
    n = len(s)

    # sign
    if n > 0 and (s[0] == '+' or s[0] == '-'): 
        i += 1
    # integer part 
    while i < len(s) and s[i].isdigit(): 
        res = True
        i += 1
    # decimal point 
    # fractional part
    if i < n and s[i] == '.':
        i += 1
        while i < len(s) and s[i].isdigit(): 
            res = True 
            i += 1
    # e part 
    # True only when digit both in before and after e
    if res == True and i < n and s[i] == 'e':
        i += 1 
        # set res to False again, cause '0e' is False
        res = False

        # '+' or '-' after e is allowed
        if i < n and (s[i] == '+' or s[i] == '-'): 
            i += 1 

        while i < len(s) and s[i].isdigit(): 
            res = True
            i += 1
    # key part: compare len of s and the counting of diigts
    return res and n == i
#print isNumber('-3e+2 ')

#10. Longest Substring Without Repeating Characters

# O(n) runtime, O(1) space 

# Instead of using a table to tell if a character exists or not
# we could define a mapping of the characters to its index

# Ex. "abcabcbb" is "abc"
# Ex. "abba"
def lengthOfLongestSubstring(s): 
    if s == '': 
        return 0

    dict = {}
    start = 0 
    res = 1 

    for i in range(len(s)): 
        #if s[i] in dict: 
        if s[i] in dict and dict[s[i]] >= start: 
            start = dict[s[i]] + 1 
        dict[s[i]] = i 
        res = max(res, i - start + 1)

    return res

#print lengthOfLongestSubstring("abba")


# 11. Longest Substring with At Most Two Distinct Characters

# Ex. Given S = "eceba", T is "ece" which its length is 3

# Ex. abaac


# Way 1: 3 pointers 

# ??? 
def lengthOfLongestSubstringTwoDistinct(s): 
    if len(s) <= 1: 
        return len(s)

    res = 0 
    i = 0 
    j = -1 

    for k in range(1,len(s)): 

        if s[k] == s[k-1]: 
            continue

        if j >= 0 and s[j] != s[k]: 
            res = max(res, k-i)
            i = j + 1
        j = k - 1
        print i,j,k,res

    return max(len(s) - i, res)

#print lengthOfLongestSubstringTwoDistinct('abaac')




# 12. Missing Ranges

# Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.
# For example, given [0, 1, 3, 50, 75], return ["2", "4->49", "51->74", "76->99"]

# Key part: iterate len(A) + 1 time 
# Because need to find missing range before A[0] and after A[len(A)]

# Key 2:start = starts - 1, because res.append start + 1

def findMissingRanges(A, starts, ends): 
    res = []
    start = starts - 1
    for i in range(len(A)+1):
        end = A[i] if i <= len(A) - 1 else ends
        if start < end: 
            if end - start > 2: 
                res.append(str(start+1) + '->' + str(end-1))
            elif end - start == 2: 
                res.append(str(start+1))
        start = end 
    return res 

#print findMissingRanges([0, 1, 3, 50, 75],0,100)


#13. Longest Palindromic Substring

# DP 
def longestPalindromeDP(s):
    pass


# Expanding 
# Ex. 'aba', 'abba'

# Ex. 'aba', l = -1, r = 3, return 3
def expand(s, l, r):
    while l >=0 and r < len(s) and s[l] == s[r]: 
        l -= 1 
        r += 1
    return r - l - 1 

def longestPalindrome(s): 
    if len(s) <= 1:
        return s 
    start = 0; end = 0
    for i in range(len(s)): 
        len1 = expand(s,i,i)
        len2 = expand(s,i,i+1)
        length = max(len1, len2)
        if length > end - start: 
            # if length is even, length - 1
            # Ex.'abba', i = 1, length = 4, start = 1 - (4-1)/2 = 0
            start = i - (length-1)/2
            end = i + length/2 
            #print start, end

    return s[start: end+1]

#print longestPalindrome('abba')


# 14. One Edit Distance

# Given two strings S and T, determine if they are both one edit distance apart.


# i. Modify operation - Modify a character to X in S.
#       S = 'abcde'
#       T = 'abcXe'

# ii. Insert operation - X was inserted before a character in S.
#       S = 'abcde'
#       T = 'abcXde'

def isOneEditDistance(S, T):
    m = len(S)
    n = len(T)

    if m > n: 
        return isOneEditDistance(T,S)

    if n - m > 1: 
        return False 

    i = 0 
    diff = n - m

    while i < m and S[i] == T[i]: 
        i += 1
    if i == m: 
        return True
    if diff == 0: 
        i += 1 
    while i < m and S[i] == T[i+diff]:
        i += 1

    return i == m
    
print isOneEditDistance('abcde', 'abcde')










        














